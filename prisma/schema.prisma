// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) @map("id")
  email     String   @unique @map("email")
  password  String   @map("password")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order[]
  cart      Cart[]
  review    Review[]

  @@map("users")
}

model Product {
  id           Int            @id @default(autoincrement()) @map("id")
  name         String         @unique @map("name")
  price        Float          @map("price")
  summary      String         @map("summary")
  star         Float          @unique @map("star")
  description  String         @map("description")
  categoryId   Int
  category     Category       @relation(fields: [categoryId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  productImage ProductImage[]
  orderItem    OrderItem[]
  cart         Cart[]
  review       Review[]

  @@map("product")
}

model Category {
  id        Int       @id @default(autoincrement()) @map("id")
  name      String    @unique @map("name")
  isActive  Boolean   @map("is_active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@map("category")
}

model ProductImage {
  id        Int      @id @default(autoincrement()) @map("id")
  url       String   @map("url")
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_image")
}

model Order {
  id          Int         @id @default(autoincrement()) @map("id")
  orderDate   DateTime    @map("order_date")
  totalAmount Float       @map("total_amount")
  status      String      @map("status")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
  userId      Int?
  orderItem   OrderItem[]

  @@map("order")
}

model OrderItem {
  id        Int      @id @default(autoincrement()) @map("id")
  orderDate DateTime @map("order_date")
  price     Float    @map("price")
  status    String   @map("status")
  quantity  Int      @map("quantity")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@map("order_item")
}

model Cart {
  id        Int      @id @default(autoincrement()) @map("id")
  quantity  Int      @map("quantity")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@map("cart")
}

model Review {
  id        Int      @id @default(autoincrement()) @map("id")
  text      String   @map("text")
  star      Float    @map("star")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int

  @@map("review")
}
